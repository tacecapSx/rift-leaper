<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_portal</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dimensionTimerMax = seconds(12);
dimensionTimer = dimensionTimerMax - seconds(1);
swapTimerMax = seconds(0.8);
swapTimer = 0;
swapping = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xTo = view_xview + view_wview/2;
var yTo = view_yview + view_hview/2;

if dimensionTimer &gt; dimensionTimerMax - 60 {
    image_alpha = (abs((dimensionTimerMax - dimensionTimer) - 60)) / 60;
}
else {
    image_alpha = ((dimensionTimerMax - dimensionTimer)-60) / (dimensionTimerMax-60);
}

prevImageAngle = image_angle;

image_alpha *= 0.5;

image_xscale = image_alpha * 5;
image_yscale = image_alpha * 5;
image_angle += image_alpha * 2;

x += (xTo - x) / ((1.1-image_alpha)*10);
y += (yTo - y) / ((1.1-image_alpha)*10);


if !swapping {
    timeScale = 1;
    dimensionTimer -= timeScale;
    
    if dimensionTimer &lt; seconds(2) {
        //warn
        
        if dimensionTimer &lt; 0 {
            timeScale = 0;
            swapTimer = swapTimerMax;
            swapping = true;
            
            var toSwapList = ds_list_create();
            
            for(var i = 0; i &lt; instance_number(par_platform); i++) {
                ds_list_add(toSwapList, instance_find(par_platform, i));
            }
            
            var swapCount = 0;
            swapArray = 0;
            swapMiddles = 0;
            swapAngles = 0;
            swapLengths = 0;
            
            while(swapCount &lt; instance_number(par_platform) - 1) {
                var _i = irandom(ds_list_size(toSwapList) - 1);
                swapArray[swapCount] = ds_list_find_value(toSwapList, _i);
                ds_list_delete(toSwapList, _i);
                swapCount++;
                
                var _i = irandom(ds_list_size(toSwapList) - 1);
                swapArray[swapCount] = ds_list_find_value(toSwapList, _i);
                ds_list_delete(toSwapList, _i);
                swapCount++;
                
                //swapangles
                var _x = (swapArray[swapCount - 2].x + swapArray[swapCount - 1].x) / 2;
                var _y = (swapArray[swapCount - 2].y + swapArray[swapCount - 1].y) / 2;
                
                swapAngles[swapCount - 2] = point_direction(_x, _y, swapArray[swapCount - 2].x, swapArray[swapCount - 2].y);
                swapAngles[swapCount - 1] = point_direction(_x, _y, swapArray[swapCount - 1].x, swapArray[swapCount - 1].y);
                
                swapMiddles[swapCount - 2] = _x;
                swapMiddles[swapCount - 1] = _y;
                
                swapLengths[swapCount - 2] = point_distance(_x, _y, swapArray[swapCount - 2].x, swapArray[swapCount - 2].y);
                swapLengths[swapCount - 1] = point_distance(_x, _y, swapArray[swapCount - 1].x, swapArray[swapCount - 1].y);
                
                //swap tracks
                var t = swapArray[swapCount - 2].track;
                swapArray[swapCount - 2].track = swapArray[swapCount - 1].track;
                swapArray[swapCount - 1].track = t;
                
                t = swapArray[swapCount - 2].trackSpeed;
                swapArray[swapCount - 2].trackSpeed = swapArray[swapCount - 1].trackSpeed;
                swapArray[swapCount - 1].trackSpeed = t;
                
                t = swapArray[swapCount - 2].trackDirection;
                swapArray[swapCount - 2].trackDirection = swapArray[swapCount - 1].trackDirection;
                swapArray[swapCount - 1].trackDirection = t;
                
                t = swapArray[swapCount - 2].trackProgress;
                swapArray[swapCount - 2].trackProgress = swapArray[swapCount - 1].trackProgress;
                swapArray[swapCount - 1].trackProgress = t;
                
                swapArray[swapCount - 2]._hspeed = 0;
                swapArray[swapCount - 2]._vspeed = 0;
                swapArray[swapCount - 1]._hspeed = 0;
                swapArray[swapCount - 1]._vspeed = 0;
                swapArray[swapCount - 2].hspeed = 0;
                swapArray[swapCount - 2].vspeed = 0;
                swapArray[swapCount - 1].hspeed = 0;
                swapArray[swapCount - 1].vspeed = 0;
            }
        }
    }
}
else {
    for(var i = 0; i &lt; array_length_1d(swapArray)-1; i++) {
        var _lerp = ((swapTimerMax-swapTimer) / swapTimerMax);
    
        swapArray[i].x = swapMiddles[i] + lengthdir_x(swapLengths[i], swapAngles[i] + 180 * _lerp);
        swapArray[i].y = swapMiddles[i + 1] + lengthdir_y(swapLengths[i], swapAngles[i] + 180 * _lerp);
        
        i++
        
        swapArray[i].x = swapMiddles[i - 1] + lengthdir_x(swapLengths[i], swapAngles[i] + 180 * _lerp);
        swapArray[i].y = swapMiddles[i] + lengthdir_y(swapLengths[i], swapAngles[i] + 180 * _lerp);
    }
    
    image_angle++;
    
    swapTimer--;
    
    if swapTimer &lt; 0 {
        swapping = false;
        dimensionTimer = dimensionTimerMax;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,image_index,x+random_range(-image_alpha*2,image_alpha*2),y+random_range(-image_alpha*2,image_alpha*2),image_xscale,image_yscale,image_angle,image_blend,image_alpha);

//clock hands
draw_sprite_ext(spr_clockHand,1,x+random_range(-image_alpha*2,image_alpha*2),y+random_range(-image_alpha*2,image_alpha*2),image_xscale,image_yscale,-image_angle*0.5,image_blend,image_alpha);

for(var i = 1; i &gt; 0.01; i-=0.25) {
    draw_sprite_ext(spr_clockHand,0,x+random_range(-image_alpha*2,image_alpha*2),y+random_range(-image_alpha*2,image_alpha*2),image_xscale,image_yscale,-image_angle*0.5*60+(1-i)*(image_angle-prevImageAngle)*128,image_blend,image_alpha*i);
}

if swapping {
    draw_set_alpha(0.5);
    for(var i = 0; i &lt; array_length_1d(swapArray); i++) {
        draw_line_width_colour(x,y,swapArray[i].x,swapArray[i].y,clamp(-(1/75) * point_distance(x,y,swapArray[i].x,swapArray[i].y) + 5, 1, 5), c_purple, c_blue);
    }
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
