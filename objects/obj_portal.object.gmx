<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dimensionTimerMax = seconds(12);
dimensionTimer = dimensionTimerMax;
swapTimerMax = seconds(2);
swapTimer = 0;
swapping = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xTo = view_xview + view_wview/2;
var yTo = view_yview + view_hview/2;

x += (xTo - x) / 20;
y += (yTo - y) / 20;

if !swapping {
    timeScale = 1;
    dimensionTimer -= timeScale;
    
    if dimensionTimer &lt; seconds(2) {
        //warn
        
        if dimensionTimer &lt; 0 {
            timeScale = 0;
            swapTimer = swapTimerMax;
            swapping = true;
            
            var toSwapList = ds_list_create();
            
            for(var i = 0; i &lt; instance_number(par_platform); i++) {
                ds_list_add(toSwapList, instance_find(par_platform, i));
            }
            
            var swapCount = 0;
            swapArray = 0;
            swapMiddles = 0;
            swapAngles = 0;
            swapLengths = 0;
            
            while(swapCount &lt; instance_number(par_platform) - 1) {
                var _i = irandom(ds_list_size(toSwapList) - 1);
                swapArray[swapCount] = ds_list_find_value(toSwapList, _i);
                ds_list_delete(toSwapList, _i);
                swapCount++;
                
                var _i = irandom(ds_list_size(toSwapList) - 1);
                swapArray[swapCount] = ds_list_find_value(toSwapList, _i);
                ds_list_delete(toSwapList, _i);
                swapCount++;
                
                //swapangles
                var _x = (swapArray[swapCount - 2].x + swapArray[swapCount - 1].x) / 2;
                var _y = (swapArray[swapCount - 2].y + swapArray[swapCount - 1].y) / 2;
                
                swapAngles[swapCount - 2] = point_direction(_x, _y, swapArray[swapCount - 2].x, swapArray[swapCount - 2].y);
                swapAngles[swapCount - 1] = point_direction(_x, _y, swapArray[swapCount - 1].x, swapArray[swapCount - 1].y);
                
                swapMiddles[swapCount - 2] = _x;
                swapMiddles[swapCount - 1] = _y;
                
                swapLengths[swapCount - 2] = point_distance(_x, _y, swapArray[swapCount - 2].x, swapArray[swapCount - 2].y);
                swapLengths[swapCount - 1] = point_distance(_x, _y, swapArray[swapCount - 1].x, swapArray[swapCount - 1].y);
            }
        }
    }
}
else {
    for(var i = 0; i &lt; array_length_1d(swapArray)-1; i++) {
        var _lerp = ((swapTimerMax-swapTimer) / swapTimerMax);
    
        swapArray[i].x = swapMiddles[i] + lengthdir_x(swapLengths[i], swapAngles[i] + 180 * _lerp);
        swapArray[i].y = swapMiddles[i + 1] + lengthdir_y(swapLengths[i], swapAngles[i] + 180 * _lerp);
        
        i++
        
        swapArray[i].x = swapMiddles[i - 1] + lengthdir_x(swapLengths[i], swapAngles[i] + 180 * _lerp);
        swapArray[i].y = swapMiddles[i] + lengthdir_y(swapLengths[i], swapAngles[i] + 180 * _lerp);
    }
    
    swapTimer--;
    
    if swapTimer &lt; 0 {
        swapping = false;
        dimensionTimer = dimensionTimerMax;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
