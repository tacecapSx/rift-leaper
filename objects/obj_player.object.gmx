<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grounded = false;
maxJumps = 2;
jumps = maxJumps - 1;
canShoot = true;
platform = noone;
airTime = 0;
image_speed = 0.07;

view_xview = x - view_wview/2;
view_yview = y - view_hview/2;

instance_create(mouse_x, mouse_y, obj_cursor);
gun = instance_create(x,y,obj_gun);
instance_create(x,y,obj_portal);

leftPoint = instance_create(x,y,obj_collPoint);
rightPoint = instance_create(x,y,obj_collPoint);

leftPoint.xOffset = -5;
rightPoint.xOffset = 4;

_vspeed = 0;
_hspeed = 0;

levelEndTimer = 0;
ending = false;
deathTimer = 0;
spawnTimer = 30;
screenShake = 0;
counter = 0;
exitDirection = point_direction(x,y,obj_exit.x,obj_exit.y);
hadFocus = true;
focus = false;
slowmo = false;
boosting = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///camera

if screenShake &gt; 0 screenShake -= 0.05 else screenShake = 0;

var xTo = x + hspeed*30 - view_wview/2;
var yTo = y + vspeed*30 - view_hview/2;

view_xview -= ((view_xview - xTo) / 20) * timeScale;
view_yview -= ((view_yview - yTo) / 20) * timeScale;

view_xview += random_range(-screenShake,screenShake);
view_yview += random_range(-screenShake,screenShake);

//view_xview = round(view_xview*100)/100;
//view_yview = round(view_yview*100)/100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///logic

if timeScale != 0 instance_create(random_range(bbox_left,bbox_right),random_range(bbox_top,bbox_bottom),part_fire);

if keyboard_check_pressed(ord('R')) room_restart();
if keyboard_check_pressed(ord('N')) &amp;&amp; keyboard_check(shift) room_goto(room_next(room));
if keyboard_check_pressed(ord('P')) &amp;&amp; keyboard_check(shift) room_goto(room_previous(room));

h = keyboard_check(ord('D')) - keyboard_check(ord('A'));

if grounded {
    if h != 0 image_xscale = h;
}
else image_xscale = gun.image_yscale;

if h == 0 &amp;&amp; grounded {
    _hspeed /= 1.25;
}
else if (abs(_hspeed) &lt; 2.5 || abs(_hspeed + h * 0.33) &lt; abs(_hspeed)) {
    _hspeed += h * 0.33;
}

var grav = 0.275;

_vspeed = clamp(_vspeed + grav * timeScale, -1000, 6)

if !obj_portal.swapping &amp;&amp; !boosting {
    //slowmo
    slowmo = keyboard_check(shift);
    
    if (slowmo || ending || obj_portal.warning) {
        counter++;
    
        if !ending {
            if obj_portal.warning {
                timeScale = ternary(obj_portal.dimensionTimer &lt; 100,
                    clamp(obj_portal.dimensionTimer / obj_portal.warningThreshold,0.25,1),
                    clamp((obj_portal.dimensionTimerMax - obj_portal.dimensionTimer) / obj_portal.warningThreshold,0.25,1));
            }
            else {
                timeScale = 0.25;
            }
        }
        
        if counter mod 4 == 0 {
            var _a = instance_create(x,y,obj_afterImage);
            _a.sprite_index = sprite_index;
            _a.image_index = image_index;
            _a.image_xscale = image_xscale;
            _a.image_yscale = image_yscale;
            _a.image_angle = image_angle;
            _a = instance_create(x,y,obj_afterImage);
            _a.sprite_index = gun.sprite_index;
            _a.image_index = gun.image_index;
            _a.image_xscale = gun.image_xscale;
            _a.image_yscale = gun.image_yscale;
            _a.image_angle = gun.image_angle;
        }
    }
    else timeScale = 1;
    
    //horizontal
    if leftPoint.colliding &amp;&amp; leftPoint.colliding.object_index != obj_boostPlatform &amp;&amp; leftPoint.colliding.object_index != obj_bouncePlatform {
        _hspeed = 0;
    }
    
    if rightPoint.colliding &amp;&amp; rightPoint.colliding.object_index != obj_boostPlatform &amp;&amp; rightPoint.colliding.object_index != obj_bouncePlatform {
        _hspeed = 0;
    }    

    //vertical
    platform = instance_place(x, y + _vspeed, par_platform);
    
    //head check
    if platform {
        if platform.y &lt; y {
            if platform.object_index != obj_boostPlatform &amp;&amp; platform.object_index != obj_bouncePlatform _vspeed = 0.5;
            platform = noone;
        }
    }
    
    var prev = grounded;
    grounded = (platform != noone &amp;&amp; platform.object_index != obj_boostPlatform &amp;&amp; platform.object_index != obj_bouncePlatform);
    if grounded != prev jumps--;
    
    if grounded {
        platform.active = true;
        jumps = maxJumps;
        canShoot = true;
        
        if grounded != prev y = platform.y - 4.5;
        
        vspeed = platform._vspeed;
        _vspeed = platform._vspeed / timeScale;
    }
    
    if keyboard_check_pressed(vk_space) &amp;&amp; jumps &gt; 0 &amp;&amp; (jumps == maxJumps || _vspeed &gt; -6) {
        if !mute audio_play_sound(snd_jump,0,false);
        
        if (!grounded &amp;&amp; airTime &gt; 10) jumps--;
        
        _vspeed = -6;
    }
}
else{
    hspeed=0;vspeed=0;
}

if !grounded airTime++ else airTime = 0;

if timeScale == 0 &amp;&amp; _vspeed &gt; 2 _vspeed = 0;

if point_distance(x,y,obj_exit.x,obj_exit.y) &lt; 10 {
    x = obj_exit.x;
    y = obj_exit.y;
    hspeed=0;vspeed=0;
    
    if levelEndTimer == 0 {
        if !mute audio_play_sound(snd_exit,0,false);
    
        var _i = instance_create(x,y,obj_portalFlash);
        _i.image_angle = exitDirection;
        
        screenShake = 5;
    
        repeat(120) {
            var d = random(360);
            var p = instance_create(x+lengthdir_x(24,d),y+lengthdir_y(24,d),part_exit);
            var l = random(2)+1;
            d+=random_range(-5,5);
            
            p._hspeed = lengthdir_x(l,d);
            p._vspeed = lengthdir_y(l,d);
        }
    }
    
    levelEndTimer++;
    
    timeScale = clamp01(levelEndTimer / 60);
    
    visible = false;
    
    if levelEndTimer &gt; 60 {
        room_goto(room_next(room));
    }
}
else {
    exitDirection = point_direction(x,y,obj_exit.x,obj_exit.y);

    var _l = clamp((80-point_distance(x,y,obj_exit.x, obj_exit.y))/20,0,4);
    var _d = point_direction(x,y,obj_exit.x,obj_exit.y);
    
    var hgrav = lengthdir_x(_l,_d);
    var vgrav = lengthdir_y(_l,_d);
    if hgrav != 0 {_hspeed = ternary(abs(hgrav) &lt; 0.5, sign(hgrav)/2, hgrav); ending = true;}
    if vgrav != 0 {_vspeed = ternary(abs(vgrav) &lt; 0.5, sign(vgrav)/2, vgrav); ending = true;}
    
    if abs(hgrav)+abs(vgrav) &gt; 0 {
        timeScale = (abs(hgrav)+abs(vgrav))/2 + 0.5;
    }
    else timer++;
    
    hspeed = _hspeed * timeScale;
    if grounded &amp;&amp; !obj_portal.swapping hspeed += platform._hspeed;
    if !grounded vspeed = _vspeed * timeScale;
}

if deathTimer &gt; 0 || place_meeting(x,y,obj_deathPlane) {
    deathTimer++;
    
    if deathTimer &gt; 30 {
        room_restart();
    }
}

if spawnTimer &gt; 0 spawnTimer--;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animation

if !grounded {
    if _hspeed &gt; 2.3 / (ending*3 + 1) {
        sprite_index = ternary(image_xscale &lt; 0, spr_player_jump_left, spr_player_jump_right);
    }
    else if _hspeed &lt; -2.3 / (ending*3 + 1) {
        sprite_index = ternary(image_xscale &gt; 0, spr_player_jump_left, spr_player_jump_right);
    }
    else {
        sprite_index = spr_player_jump;
    }
}
else {
    if h == 0 {
        sprite_index = spr_player;
        image_speed = 0.12;
    }
    else {
        sprite_index = spr_player_walk;
        image_speed = 0.18;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hadFocus = focus;
focus = window_has_focus();

draw_sprite_ext(spr_normalPlatform, 0, view_xview+view_wview/2,view_yview-50,1000,1000,0,c_black,clamp01(max(deathTimer,spawnTimer, levelEndTimer-30, !focus*15)/30));

if !focus {
    draw_set_halign(fa_center);
    draw_text_shadow(view_xview+view_wview/2,view_yview+view_hview/2,1,1,"Click to return to game!",-1,0,1,1);
    draw_set_halign(fa_left);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_blend_mode(bm_add);
draw_sprite_ext(spr_glow,0,x,y,1,1,0,-1,0.075);
draw_set_blend_mode(bm_normal);

draw_self();

if slowmo {
    draw_sprite_ext(spr_exitArrow,image_index mod 2,x + lengthdir_x(60,exitDirection), y + lengthdir_y(60,exitDirection), 1, 1, exitDirection,-1,0.5);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
