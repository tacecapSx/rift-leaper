<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>active = false;
track = noone;
trackSpeed = 0.5;
trackProgress = 0;
trackDirection = true;
_hspeed = 0;
_vspeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>active = false;

if track != noone {
    if trackProgress &gt; track.length trackDirection = false;
    else if trackProgress &lt; 0 trackDirection = true;

    var _lerp = trackProgress / track.length;
    show_debug_message(_lerp);

    switch(track.object_index) {
        case obj_track1: //straight
            x = lerp(track.startX, track.endX, _lerp);
            y = lerp(track.startY, track.endY, _lerp);
        break;
        case obj_track2: //semicircle
            x = track.x + lengthdir_x(track.radius, lerp(track.startAngle, track.endAngle, _lerp));
            y = track.y + lengthdir_y(track.radius, lerp(track.startAngle, track.endAngle, _lerp));
        break;
        case obj_track4: //circle
            x = track.x + lengthdir_x(track.radius, lerp(0, 360, _lerp));
            y = track.y + lengthdir_y(track.radius, lerp(0, 360, _lerp));
            
            if trackProgress + trackSpeed * timeScale &gt; track.length {
                trackProgress = 0;
            }
        break;
    }
    
    trackProgress += trackSpeed * sign(trackDirection - 0.5) * timeScale;
    
    _hspeed = x - xprevious;
    _vspeed = y - yprevious;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
