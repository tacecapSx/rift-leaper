<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000002</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar showTimer;
showTimer = false;

globalvar timeScale;
timeScale = 1;

globalvar web;
web = false;

globalvar font;
font = font_add_sprite(spr_font,ord(' '),true,1)
globalvar smallFont;
smallFont = font_add_sprite(spr_smallFont,ord(' '),true,1)

draw_set_color(c_white);

///display properties
idealWidth = 0;
idealHeight = 234;

maxZoom = 1;

hasChanged = false;

aspectRatio = display_get_width()/display_get_height();

idealWidth = round(idealHeight * aspectRatio);

if (idealWidth &amp; 1) idealWidth++;

maxZoom = floor(display_get_width()/idealWidth);
zoom = clamp(maxZoom - 1,1,maxZoom);

if !web {
    for(var i = 1; i &lt;= room_last; i++)
    {
        if room_exists(i)
        {
            room_set_view(i,0,true,0,0,idealWidth,idealHeight,0,0,idealWidth*zoom,idealHeight*zoom,0,0,0,0,-1)
            room_set_view_enabled(i,true);
        }
    }

    alarm[1] = 1;
}
else {
    for(var i = 1; i &lt;= room_last; i++)
    {
        if room_exists(i)
        {
            room_set_view(i,0,true,0,0,416,234,0,0,416*2,234*2,0,0,0,0,-1)
            room_set_view_enabled(i,true);
        }
    }
}

room_goto(room_next(room));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window_set_size(idealWidth * zoom, idealHeight * zoom);
surface_resize(application_surface,idealWidth * zoom, idealHeight * zoom);

view_wport = idealWidth * zoom;
view_hport = idealHeight * zoom;

alarm[0] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !web
{
    if(keyboard_check_pressed(ord('Z')) &amp;&amp; !window_get_fullscreen())
    {
        zoom++;
        
        if zoom &gt; maxZoom zoom = 1;
        
        window_set_size(idealWidth * zoom, idealHeight * zoom);
        surface_resize(application_surface,idealWidth * zoom, idealHeight * zoom);
        
        view_wport = idealWidth * zoom;
        view_hport = idealHeight * zoom;
        
        for(var i = 1; i &lt;= room_last; i++)
        {
            if room_exists(i)
            {
                room_set_view(i,0,true,0,0,idealWidth,idealHeight,0,0,idealWidth*zoom,idealHeight*zoom,0,0,0,0,-1)
                room_set_view_enabled(i,true);
            }
        }
        
        alarm[0] = 1;
    }
    
    if window_get_fullscreen()
    {
        if hasChanged = false
        {
            surface_resize(application_surface,display_get_width(),display_get_height());
            
            view_wport = display_get_width();
            view_hport = display_get_height();
            
            for(var i = 1; i &lt;= room_last; i++)
            {
                if room_exists(i)
                {
                    room_set_view(i,0,true,0,0,idealWidth,idealHeight,0,0,idealWidth*zoom,idealHeight*zoom,0,0,0,0,-1)
                    room_set_view_enabled(i,true);
                }
            }
            
            hasChanged = true;
        }
    }
    else hasChanged = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(spr_background,0,view_xview,view_yview,view_wview/480,view_hview/270,0,-1,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
